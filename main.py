# –î–∞–Ω–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ readme.md (–°—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ) –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á—Ç–æ –∫ —á–µ–º—É.

SESSION_ID = "" # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
MS_TOKEN = "" # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
TARGET_USERNAME = ""
TARGET_USER_ID = "" # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
MESSAGE = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –≤ 12:00 –ø–æ –ú–°–ö!"
ONRUNMESSAGE = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–¥–∞."
LOGINGUI = True

# –µ—Å–ª–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –∫–æ–¥ —ç—Ç–æ–≥–æ –Ω–µ —Å–∫–∞–∂–µ—Ç. —Ç–∞–∫ —á—Ç–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º TARGET_USERNAME, MESSAGE, ONRUNMESSAGE, LOGINGUI. –û—Å—Ç–∞–ª—å–Ω–æ–µ - –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞

# –∏–º–ø–æ—Ä—Ç—ã –≤–Ω–∏–∑—É –ª–æ–æ–æ–æ–ª —á–æ–æ–æ–æ –≤–∞—â–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–ª–∏–∑ –∏–º–ø–æ—Ä—Ç—ã, –º–∞—Ä–∞—Ñ–æ–Ω –≤ 3 —á–∞—Å–∞ –Ω–æ—á–∏)

import time, json, os
from datetime import datetime, timedelta, timezone
from TikTokApi import TikTokApi
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
import logging
from selenium.webdriver.chrome.options import Options
import re

# —Å–∞–º—ã–π —Ö—É–¥—à–∏–π –∫–æ–¥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è, –∑–∞—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç üëç

logging.getLogger('selenium').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)
MSK = timezone(timedelta(hours=3))
COOKIE_FILE = "tiktok_tokens.json"

# –ó–∞–ø—É—Å–∫ —à–µ–¥–µ–≤—Ä–æ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –≤—Ö–æ–¥–∞. (–≤ —Å–ª—É—á–∞–µ LOGINGUI=True –∏ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.)
def login_gui():
    chrome_options = Options()
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    chrome_options.add_argument("--disable-extensions")
    chrome_options.set_capability("goog:loggingPrefs", {"performance": "ALL"})
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    driver.maximize_window()
    driver.get("https://www.tiktok.com")
    print("–ó–∞–ø—É—Å–∫ —Å–∞–π—Ç–∞...")

    try:
        print("–í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∞–∫–∫–∞—É–Ω—Ç Tiktok. –í–Ω–∏–º–∞–Ω–∏–µ! –ë—É–¥—É—Ç —Å–æ–±—Ä–∞–Ω—ã SESSION_ID –∏ MS_TOKEN –∏ –±—É–¥—É—Ç –ø–æ–º–µ—â–µ–Ω—ã –≤ tiktok_tokens.json...")
        print("–ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥... (–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —Å–ø–∞–º MS_TOKEN –≤ –∫–æ–Ω—Å–æ–ª–µ, —Ç–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
        session_id = None
        ms_token = None
        max_wait_time = 300
        start_time = time.time()
        while time.time() - start_time < max_wait_time:
            cookies = driver.get_cookies()
            for c in cookies:
                if c["name"] == "sessionid": 
                    session_id = c["value"]
            
            logs = driver.get_log("performance")
            for log in logs:
                try:
                    network_log = json.loads(log["message"])["message"]
                    if "Network.requestWillBeSent" in network_log["method"]:
                        request_url = network_log["params"]["request"]["url"]
                        if "msToken=" in request_url:
                            match = re.search(r'msToken=([^&]+)', request_url)
                            if match:
                                ms_token = match.group(1)
                                print(f"msToken –Ω–∞–π–¥–µ–Ω –≤ URL! (–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ)")
                except:
                    continue
            if session_id and ms_token:
                print("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                break
            time.sleep(5)
            print(".", end="", flush=True)
        if not session_id or not ms_token:
            print("\n–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
        else:
            print()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
    if not session_id:
        cookies = driver.get_cookies()
        for c in cookies:
            if c["name"] == "sessionid": 
                session_id = c["value"]
    driver.quit()
    if not session_id:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sessionid. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
    else:
        # print(f"SessionID: {session_id}")
        # –£–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å session_id
        print(f"SessionID —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {'*'*(len(session_id)-4) + session_id[-4:] if session_id else 'None'}")
    
    if not ms_token:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å msToken. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
    else:
        # print(f"msToken: {ms_token}")
        # –£–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ms_token
        print(f"msToken —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {'*'*(len(ms_token)-4) + ms_token[-4:] if ms_token else 'None'}") 
    data = {"session_id": session_id, "ms_token": ms_token}
    with open(COOKIE_FILE, "w") as f:
        json.dump(data, f)
    return session_id, ms_token
def load_tokens():
    if os.path.exists(COOKIE_FILE):
        try:
            with open(COOKIE_FILE, "r") as f:
                d = json.load(f)
                if "timestamp" in d:
                    last_login_time = d.get("timestamp", 0)
                    current_time = time.time()
                    if current_time - last_login_time < 300:
                        return d.get("session_id"), d.get("ms_token")
            return d.get("session_id"), d.get("ms_token")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–∫–µ–Ω–æ–≤: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å tiktok_tokens.json")
    return None, None
def validate_tokens(session_id, ms_token):
    if not session_id or not ms_token:
        return False
    try:
        test_api = TikTokApi()
        test_api.sessionid = session_id
        test_api.ms_token = ms_token
        try:
            test_api.trending.hashtag()
            print("–ü—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.") # plot twist: —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å –≤ –∫–æ–¥–µ
            return True
        except Exception as specific_e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {specific_e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            if session_id and ms_token:
                print("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ. (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                return True
            return False
    except Exception as e:
        print(f"–¢–æ–∫–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        return False
s, m = load_tokens()
tokens_valid = False
if s and m:
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    tokens_valid = validate_tokens(s, m)
if not tokens_valid:
    if LOGINGUI:
        print("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∞–π—Ç–∞ —Å –≤—Ö–æ–¥–æ–º...")
        s, m = login_gui()
        if s and m:
            data = {"session_id": s, "ms_token": m, "timestamp": time.time()}
            with open(COOKIE_FILE, "w") as f:
                json.dump(data, f)
    
    if not s and os.path.exists(COOKIE_FILE):
        s, m = load_tokens()




SESSION_ID = SESSION_ID or s
MS_TOKEN = MS_TOKEN or m
if not SESSION_ID:
    print("–ù–µ—Ç—É SESSION_ID. –í–∫–ª—é—á–∏—Ç–µ LOGINGUI –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ-—Ö–æ—Å—Ç–∏–Ω–≥. –í –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ - —á–µ–∫–Ω–∏—Ç–µ readme.md")
    exit()

# –≠—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. (—Å–¥–µ–ª–∞–π—Ç–µ tiktok api –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º üôèüôèüôè)
api = TikTokApi()
api.sessionid = SESSION_ID
api.ms_token = MS_TOKEN
def get_tiktok_user_id(username: str) -> tuple:
    try:
        import requests, re, json # –∏–º–ø–æ—Ä—Ç–∏–ª –ª–∏ —è –¥–æ —ç—Ç–æ–≥–æ? –¥–∞ –≤–∞—â–µ –ø–æ—Ñ–∏–≥. —Ä–∞–±–æ—Ç–∞–µ—Ç –∂–µ
        url = f"https://www.tiktok.com/@{username.lstrip('@')}"
        headers = {"User-Agent":"Mozilla/5.0"}
        resp = requests.get(url, headers=headers)
        m = re.search(r'<script id="__NEXT_DATA__" type="application/json">(.+?)</script>', resp.text)
        if not m:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {username} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            return None, None
        data = json.loads(m.group(1))
        user = data["props"]["pageProps"]["userInfo"]["user"]
        return user["id"], user.get("secUid")
    except Exception as e:
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–µ–±-–∑–∞–ø—Ä–æ—Å: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        return None, None
def send_message(api, username, text, direct_user_id=None):
    try:
        user_id = direct_user_id
        sec_uid = None
        if not user_id:
            try:
                user = api.user(username=username)
                print(f"{type(user)} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                if hasattr(user, 'id'):
                    user_id = user.id
                    print(f"{user_id} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                elif hasattr(user, 'user_id'):
                    user_id = user.user_id
                    print(f"{user_id} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                elif hasattr(user, 'uniqueId'):
                    print(f"{user.uniqueId} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                if hasattr(user, 'sec_uid'):
                    sec_uid = user.sec_uid
                    print(f"{sec_uid} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            except Exception as e:
                print(f"TikTokAPI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª. {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            if not user_id:
                print("–î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                user_id, sec_uid = get_tiktok_user_id(username)
                if user_id:
                    print(f"–ü–æ–ª—É—á–µ–Ω ID –∏–∑ –≤–µ–± —Ä–µ–∫–≤–µ—Å—Ç–∞: {user_id} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                if sec_uid:
                    print(f"–ü–æ–ª—É—á–µ–Ω sec_uid –∏–∑ –≤–µ–± —Ä–µ–∫–∞–µ—Å—Ç–∞: {sec_uid} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        if not user_id:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TikTokAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID. {username}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–¥—Ä—É–≥ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–∏–∫–µ (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            return None
            
        print(f"–ü–æ–ª—É—á–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        try:
            import requests
            import time
            conversation_id = get_or_create_conversation(user_id)
            if not conversation_id:
                print("–ù–µ –ø–æ–ª—É—á–µ–Ω ID —á–∞—Ç–∞. (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å?)")
                return False
                
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID —á–∞—Ç–∞: {conversation_id}")
            url = "https://www.tiktok.com/api/im/send_message/"
            headers = {
                "authority": "www.tiktok.com",
                "accept": "*/*",
                "accept-language": "en-US,en;q=0.9",
                "content-type": "application/x-www-form-urlencoded",
                "cookie": f"sessionid={SESSION_ID}",
                "origin": "https://www.tiktok.com",
                "referer": f"https://www.tiktok.com/messages",
                "sec-ch-ua": '"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"',
                "sec-ch-ua-mobile": "?0",
                "sec-ch-ua-platform": '"Windows"',
                "sec-fetch-dest": "empty",
                "sec-fetch-mode": "cors",
                "sec-fetch-site": "same-origin",
                "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            }
            data = {
                "conversation_id": conversation_id,
                "conversation_short_id": conversation_id,
                "content": text,
                "text": text,
                "type": 0,
                "msToken": MS_TOKEN,
                "X-Bogus": generate_x_bogus(),
                "_signature": generate_signature()
            }
            url += f"?_t={int(time.time() * 1000)}"
            response = requests.post(url, headers=headers, data=data)
            print(f": {response.status_code}")
            print(f": {response.headers}")
            try:
                print(f": {response.json()}")
            except:
                print(f": {response.text}")
            if response.status_code == 200:
                try:
                    resp_json = response.json()
                    if resp_json.get("status_code") == 0:
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username}: {text}")
                        return True
                    else:
                        print(f"TikTok API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {resp_json.get('status_msg', 'Unknown error')}")
                        return False
                except:
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username}: {text}")
                    return True
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def get_or_create_conversation(user_id):
    try:
        import requests
        url = "https://www.tiktok.com/api/im/conversation/list/"
        headers = {
            "Cookie": f"sessionid={SESSION_ID}",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            try:
                data = response.json()
                conversations = data.get("conversations", [])
                for conv in conversations:
                    participants = conv.get("participants", [])
                    for participant in participants:
                        if str(participant.get("user_id")) == str(user_id):
                            return conv.get("conversation_id")
            except:
                pass
        create_url = "https://www.tiktok.com/api/im/create_conversation/"
        create_data = {
            "recipient_id": user_id,
            "msToken": MS_TOKEN
        }
        create_response = requests.post(create_url, headers=headers, data=create_data)
        if create_response.status_code == 200:
            try:
                data = create_response.json()
                return data.get("conversation_id")
            except:
                pass
                
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        return None

def generate_x_bogus():
    import random, string
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def generate_signature():
    import random, string
    return ''.join(random.choices(string.ascii_letters + string.digits, k=32))

def send_message_via_browser(username, text):
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} —á–µ—Ä–µ–∑ –°–ö–†–´–¢–´–ô –±—Ä–∞—É–∑–µ—Ä.")
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")
    driver = None
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        driver.get("https://www.tiktok.com")
        driver.add_cookie({
            "name": "sessionid",
            "value": SESSION_ID,
            "domain": ".tiktok.com"
        })
        driver.get("https://www.tiktok.com/messages")
        print("–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        driver.execute_script("window.focus();")
        time.sleep(10)
        user_found = False
        try:
            WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'DivConversationListContainer')]"))
            )
            print("–ü–æ–∏—Å–∫ –Ω–∏–∫–∞ —á–µ—Ä–µ–∑ PInfoNickname –≤ HTML... (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            nickname_elements = driver.find_elements(By.XPATH, "//p[contains(@class, 'PInfoNickname')]")
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(nickname_elements)} PInfoNickname (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            for i, elem in enumerate(nickname_elements):
                try:
                    print(f"–ù–∏–∫ {i+1}: {elem.text} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                    if username.lower() in elem.text.lower():
                        print(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {elem.text} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                        try:
                            elem.click()
                            print("–ù–∞–∂–∞—Ç–æ (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                            user_found = True
                        except Exception as click_error:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å: {click_error} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                            
                            try:
                                driver.execute_script("arguments[0].click();", elem)
                                print("–ù–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ JavaScript (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                                user_found = True
                            except Exception as js_error:
                                print(f"–ù–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ JavaScript –Ω–µ—É–¥–∞—á–Ω–æ–µ: {js_error} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                                
                                try:
                                    parent = driver.execute_script("""
                                        var element = arguments[0];
                                        var parent = element;
                                        for (var i = 0; i < 3 && parent; i++) {
                                            parent = parent.parentElement;
                                        }
                                        return parent;
                                    """, elem)
                                    if parent:
                                        driver.execute_script("arguments[0].click();", parent)
                                        print("–ù–∞–∂–∞—Ç–æ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                                        user_found = True
                                except Exception as parent_error:
                                    print(f"–ù–∞–∂–∞—Ç–∏–µ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ—É–¥–∞–ª–æ—Å—å: {parent_error} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                        if user_found:
                            time.sleep(5)
                            break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–∞. {i+1}: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            if user_found:
                try:
                    message_input = WebDriverWait(driver, 5).until(
                        EC.presence_of_element_located((By.XPATH, "//div[@data-e2e='message-input-area']"))
                    )
                    print("–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                except:
                    user_found = False
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç. (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–∞ —á–µ—Ä–µ–∑ XPath: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
        if not user_found:
            try:
                print(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å —á–∞—Ç.")
                new_chat_buttons = driver.find_elements(By.XPATH, "//button[contains(@class, 'ButtonNewChat') or contains(@aria-label, 'New') or contains(@aria-label, 'Add')]")
                if new_chat_buttons:
                    new_chat_buttons[0].click()
                    time.sleep(2)
                    search_input = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.XPATH, "//input[contains(@placeholder, 'Search') or contains(@placeholder, 'Find')]"))
                    )
                    search_input.clear()
                    search_input.send_keys(username)
                    time.sleep(5)
                    search_results = driver.find_elements(By.XPATH, "//div[contains(@class, 'SearchResultItem') or contains(@class, 'UserItem')]")
                    if search_results:
                        search_results[0].click()
                        time.sleep(2)
                        start_buttons = driver.find_elements(By.XPATH, "//button[contains(text(), 'Chat') or contains(text(), 'Message') or contains(@class, 'ButtonSend')]")
                        if start_buttons:
                            start_buttons[0].click()
                            time.sleep(2)
                            user_found = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {e}. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫?")
        if not user_found:
            print(f"!!!!!!!!!!!!!!! (–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏? –ò–ª–∏ —É–¥–∞–ª–∏—Ç–µ tiktok_tokens.json, –∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.):\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ —Å–ø–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return False
        try:
            message_input_container = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.XPATH, "//div[@data-e2e='message-input-area']"))
            )
            print("–ù–∞–π–¥–µ–Ω –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ data-e2e –∞—Ç—Ä–∏–±—É—Ç (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            editable_div = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.XPATH, "//div[@data-e2e='message-input-area']//div[contains(@class, 'public-DraftEditor-content')]"))
            )
            print("–ù–∞–π–¥–µ–Ω div –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞. (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            driver.execute_script("arguments[0].focus();", editable_div)
            editable_div.click()
            time.sleep(1)
            driver.execute_script("arguments[0].innerHTML = '';", editable_div)
            for char in text:
                driver.execute_script("if(document.activeElement !== arguments[0]) arguments[0].focus();", editable_div)
                driver.switch_to.active_element.send_keys(char)
                time.sleep(0.05)
            
            print(f"–¢–µ–∫—Å—Ç '{text}' —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            time.sleep(1)
            editable_div.send_keys(Keys.RETURN)
            print("–ù–∞–∂–∞—Ç ENTER –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            time.sleep(3)
            try:
                message_elements = driver.find_elements(By.XPATH, f"//div[contains(text(), '{text}')]")
                if message_elements:
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —á–∞—Ç–µ (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
                else:
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ, –Ω–æ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞. (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {text}")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            try:
                print("–ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                editable_divs = driver.find_elements(By.XPATH, "//div[@role='textbox' or contains(@class, 'public-DraftEditor-content')]")
                if editable_divs:
                    print(f"–ù–∞–π–¥–µ–Ω–æ {len(editable_divs)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤–≤–æ–¥–∞")
                    for i, div in enumerate(editable_divs):
                        try:
                            print(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ #{i+1}")
                            driver.execute_script("arguments[0].focus();", div)
                            div.click()
                            time.sleep(1)
                            driver.execute_script("arguments[0].innerHTML = '';", div)
                            div.send_keys(text)
                            time.sleep(1)
                            div.send_keys(Keys.RETURN)
                            time.sleep(3)
                            message_elements = driver.find_elements(By.XPATH, f"//div[contains(text(), '{text}')]")
                            if message_elements:
                                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–ª–µ –≤–≤–æ–¥–∞ #{i+1}")
                                return True
                        except Exception as div_error:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞ #{i+1}: {div_error}")
                print("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–ª–æ—Ö–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç?")
                return False
            except Exception as fallback_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–æ–≥–æ –º–µ—Ç–æ–¥–∞: {fallback_error}")
                return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä: {e}")
        return False
    finally:
        if driver:
            time.sleep(10)
            driver.quit()
from selenium.webdriver.common.keys import Keys
if TARGET_USERNAME and ONRUNMESSAGE:
    api_result = send_message(api, TARGET_USERNAME, ONRUNMESSAGE, direct_user_id=TARGET_USER_ID if TARGET_USER_ID else None)
    if not api_result:
        print("API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
        send_message_via_browser(TARGET_USERNAME, ONRUNMESSAGE)
else:
    print("–ù–µ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: TARGET_USERNAME , ONRUNMESSAGE")
def send_scheduled_message():
    if TARGET_USERNAME and MESSAGE:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {TARGET_USERNAME} –≤ {datetime.now(MSK).strftime('%H:%M:%S')}")
        api_result = send_message(api, TARGET_USERNAME, MESSAGE, direct_user_id=TARGET_USER_ID if TARGET_USER_ID else None)
        if not api_result:
            print("API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
            send_message_via_browser(TARGET_USERNAME, MESSAGE)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É–¥–µ—Ç –≤ 12:00 –ú–°–ö")
        return True
    else:
        print("–ù–µ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: TARGET_USERNAME, MESSAGE")
        return False
if TARGET_USERNAME and ONRUNMESSAGE:
    api_result = send_message(api, TARGET_USERNAME, ONRUNMESSAGE, direct_user_id=TARGET_USER_ID if TARGET_USER_ID else None)
    if not api_result:
        print("API –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä...")
        send_message_via_browser(TARGET_USERNAME, ONRUNMESSAGE)
else:
    print("–ù–µ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: TARGET_USERNAME, ONRUNMESSAGE")
print(f"–ö–æ–¥ –∂–¥—ë—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 12:00 MSK –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.")
last_run_day = -1
while True:
    now = datetime.now(MSK)
    if now.hour == 12 and now.minute == 0 and now.day != last_run_day:
        send_scheduled_message()
        last_run_day = now.day
        seconds_to_next_minute = 60 - now.second
        time.sleep(seconds_to_next_minute)
    if now.hour == 11 and now.minute >= 58:
        time.sleep(10)
    elif now.hour == 12 and now.minute == 0:
        time.sleep(1)
    else:
        time.sleep(30)
# 555 —Å—Ç—Ä–æ–∫!
